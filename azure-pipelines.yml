# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: DownloadGitHubRelease@0
  inputs:
    connection: 'nhdxxwg233'
    userRepository: 'openwrt'
    defaultVersionType: 'latest'
    downloadPath: '$(System.ArtifactsDirectory)'
    
- task: CmdLine@2
  name: Space cleanup
  inputs:
    script: |
      docker rmi `docker images -q`
      sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
      sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* android*
      sudo -E apt-get update
      sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig
      sudo -E apt-get -y autoremove --purge
      sudo -E apt-get clean
      # sudo mkdir -p -m 777 $(System.ArtifactsDirectory)/openwrt/bin $(System.ArtifactsDirectory)/openwrt/build_dir/host $(System.ArtifactsDirectory)/openwrt/build_dir/hostpkg $(System.ArtifactsDirectory)/openwrt/dl $(System.ArtifactsDirectory)/openwrt/feeds $(System.ArtifactsDirectory)/openwrt/staging_dir
      # mkdir -p ./build_dir
      ./scripts/feeds update -a
      ./scripts/feeds install -a
    workingDirectory: '$(System.ArtifactsDirectory)/openwrt'
    
- task: CmdLine@2
  name: Update feeds
  inputs:
    script: |
      ./scripts/feeds update -a
      ./scripts/feeds install -a
    workingDirectory: '$(System.ArtifactsDirectory)/openwrt'

- task: CmdLine@2
  name: Generate configuration file
  inputs:
    script: |
      rm -f ./.config*
      touch ./.config
      #
      # 在 cat >> .config <<EOF 到 EOF 之间粘贴你的编译配置, 需注意缩进关系
      # 例如:
      cat >> .config <<EOF
      CONFIG_TARGET_IMAGES_GZIP=y
      CONFIG_KERNEL_BUILD_USER="OpenWrt-CI"
      CONFIG_KERNEL_BUILD_DOMAIN="Azure"
      EOF
      #
      # ===============================================================
      # 
      sed -i 's/^[ \t]*//g' ./.config
      make defconfig